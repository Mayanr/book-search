{"version":3,"sources":["img/magnifyBooks.png","actions/searchAction.js","components/Search.js","components/Pages.js","components/Results.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","searchPages","title","activePage","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","get","concat","sent","type","payload","data","docs","numResults","num_found","t0","stop","_x","apply","this","arguments","Search","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","handleSearch","preventDefault","state","react_default","createElement","id","Form","onSubmit","Label","for","Input","name","placeholder","onChange","required","minLength","Button","color","Component","connect","Pages","handlePageChange","_this$props","document","getElementById","scrollIntoView","Pagination_default","hideDisabled","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","_ref2","results","page","searching","objectWithoutProperties","bookList","map","book","ListGroupItem","key","ListGroupItemHeading","ListGroupItemText","author_name","Array","isArray","length","author","index","first_publish_year","totalPages","Math","ceil","formattedNumResults","toString","replace","ListGroup","components_Pages","App","components_Search","components_Results","src","require","width","style","paddingTop","alt","Boolean","window","location","hostname","match","initState","rootReducer","undefined","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f7e8662.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magnifyBooks.23d0d784.png\";","import axios from \"axios\"\r\n\r\nexport const searchPages = (title, activePage) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`http://openlibrary.org/search.json?title=${title}&page=${activePage}`);\r\n        dispatch({\r\n            type: \"GET_RESULTS\",\r\n            title,\r\n            activePage,\r\n            payload: res.data.docs,\r\n            numResults: res.data.num_found\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: \"ERROR\",\r\n            payload: err\r\n        });\r\n    }\r\n};","import React, { Component } from \"react\";\r\nimport { searchPages } from \"../actions/searchAction\"\r\nimport { connect } from \"react-redux\"\r\nimport { \r\n    Input, \r\n    Button, \r\n    Form, \r\n    Label \r\n} from \"reactstrap\";\r\n\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\",\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n    //when search is called, return the searchPages results from searchActions and reset the search bar to be empty\r\n    handleSearch = e => {\r\n        e.preventDefault();\r\n        this.props.searchPages(this.state.title)\r\n        this.setState({\r\n            title: \"\",\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"search\" >\r\n                <h1>Welcome to the Book Search App!</h1>\r\n                <Form onSubmit={this.handleSearch}>\r\n                    <Label for=\"title\">Enter a book title:</Label>\r\n                    {/* a minimum of three characters are required to perform search */}\r\n                    <Input \r\n                        type=\"text\" \r\n                        id=\"title\"\r\n                        name=\"title\"\r\n                        placeholder=\"e.g., 'To Kill a Mockingbird'\"\r\n                        value={this.state.title} \r\n                        onChange={this.handleChange}\r\n                        required\r\n                        minLength=\"3\"\r\n                    />\r\n                    <Button color=\"primary\">\r\n                        Search\r\n                    </Button>\r\n                </Form>\r\n            </div>   \r\n        )\r\n    }\r\n}\r\n\r\n// need to reference when search is called, get page 1 of results\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        searchPages: (title) => dispatch(searchPages(title, 1))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Search);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\"\r\nimport { searchPages } from \"../actions/searchAction\"\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n\r\nclass Pages extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activePage: 1\r\n    };\r\n  }\r\n\r\n  // when page is clicked, recognize that page as the 'active page' and fetch the results for that page, then locate to the top of the page.\r\n  handlePageChange = async e=> {\r\n    const { title, searchPages } = this.props\r\n    this.setState({\r\n      activePage: e\r\n    })\r\n    await searchPages(title, e)\r\n    document.getElementById('app').scrollIntoView()\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div id=\"pagination\">\r\n        <Pagination \r\n          hideDisabled\r\n          activePage={this.props.activePage}\r\n          itemsCountPerPage={100}\r\n          totalItemsCount={this.props.numResults}\r\n          pageRangeDisplayed={5}\r\n          onChange={this.handlePageChange}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ results, title, numResults }) => {\r\n  return {\r\n    results,\r\n    title,\r\n    numResults\r\n  }\r\n}\r\n\r\n// need to reference when page number is clicked\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    searchPages: (title, page) => dispatch(searchPages(title, page)),\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pages);","import React from \"react\";\r\nimport  { connect } from \"react-redux\"\r\nimport Pages from './Pages';\r\nimport { \r\n  ListGroup, \r\n  ListGroupItem,\r\n  ListGroupItemHeading,\r\n  ListGroupItemText\r\n} from 'reactstrap';\r\n\r\n\r\nconst Results = ({ results, title, numResults, activePage }) => {\r\n  const bookList = results.map(book =>{\r\n    return (\r\n      // if there is no author_name provided, print \"an unidentified author\", otherwise if the array of 'author_name' is more than one person, loop through the array to print names in a more organized manner \r\n      <ListGroupItem color=\"info\" key={book.key}>\r\n        <ListGroupItemHeading>{book.title}</ListGroupItemHeading> \r\n        <ListGroupItemText>by \r\n          {typeof book.author_name ===\"undefined\" ? <span> an unidentified author </span>: \r\n            <span>\r\n              {Array.isArray(book.author_name) && book.author_name !== \"undefined\"  && book.author_name.length === 1 ?\r\n                <span> {book.author_name} </span>:\r\n                <span> \r\n                  {book.author_name.map((author, index) => {\r\n                    //add a comma after each 'author name' in the array, unless that is the last author of the array.\r\n                      if (typeof book.author_name[index+1] === \"undefined\"){\r\n                        return <span key={index}> {author}  </span>\r\n                      }\r\n                        return <span key={index}> {author}, </span>\r\n                    })\r\n                  }\r\n                </span>\r\n              }\r\n            </span> \r\n          } \r\n          {/* display the year first published if available in API, if not, note that the data is unavailable */}\r\n          <br/> {book.first_publish_year ? <span> originally published in {book.first_publish_year}</span>: <span> year published unavailable</span>}\r\n        </ListGroupItemText>\r\n      </ListGroupItem>\r\n    )\r\n  })\r\n\r\n  // determine the total amount of pages for this search to display to user\r\n  const totalPages = Math.ceil(numResults/100)\r\n\r\n  // provide amount of search results with \",\" in large numbers\r\n  const formattedNumResults = numResults.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n\r\n  return (\r\n    <div id=\"results\">\r\n      {/* if there are results, display some data to the user (number of results, their original search term with the search was conducted on, the page they're viewing out of the total number of pages) */}\r\n      { results.length > 0 && <div>\r\n        <h2>{formattedNumResults} search results for <b>{title}</b>...</h2><p>Page {activePage} of {totalPages} </p>\r\n      </div> }\r\n      <ListGroup>\r\n        {/* if no results are received from the search, print \"No results found for [the search term they entered]\", otherwise print out the response list */}\r\n        { results.length ?  <span>{ bookList } </span>: <h2> No results found for <b>{title}</b></h2> }\r\n      </ListGroup>\r\n      {/* if the number of results is greater than 100, that means there will be more than one page, so show the pagination component, 'Pages' */}\r\n      { numResults > 100 && <Pages activePage={activePage}/> }\r\n    </div>\r\n  )\r\n}\r\n\r\n// variables needed to render data to this page\r\nconst mapStateToProps = ({ searching, ...state }) => {\r\n  return state;\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Results);","import React, { Component } from 'react';\nimport  { connect } from \"react-redux\"\nimport './App.css';\nimport Search from './components/Search';\nimport Results from './components/Results';\n\n\nclass App extends Component {\n  render (){\n    return (\n      <div id=\"app\">\n        <div id=\"content\">\n          <Search />\n          {this.props.searching ?\n            <Results />:\n            <img \n              src={require('./img/magnifyBooks.png')} \n              width=\"150\" \n              style={{paddingTop: 8+\"%\"}} \n              alt=\"https://www.trendingtop5.com/wp-content/uploads/2017/08/unnamed.png\"/>\n          }\n        </div>\n        <footer>\n            <p>Built by Mayan Rothstein  |  Powered by React/Redux<br/>\n            {'\\u00A9'} August 2019</p>\n        </footer>\n      </div>\n    )\n  };\n}\n\nconst mapStateToProps = ({ searching }) => {\n  return{\n    searching\n  }\n}\n\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    results: [],\r\n    title: \"\",\r\n    activePage: 1,\r\n    searching: false,\r\n    numResults: 1,\r\n}\r\nconst rootReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case \"GET_RESULTS\":\r\n            return{\r\n                results: action.payload,\r\n                title: action.title,\r\n                activePage: action.activePage,\r\n                searching: true,\r\n                numResults: action.numResults,\r\n            }\r\n        case \"ERROR\":\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\"\nimport rootReducer from \"./reducers/rootReducer\"\nimport thunk from \"redux-thunk\"\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}